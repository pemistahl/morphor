//
// Copyright Â© 2021 Peter M. Stahl pemistahl@gmail.com
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either expressed or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// ##############################
// Tokens
// ##############################

// ### Arrows ###

arrow = {
      optional_left_to_right
    | optional_right_to_left
    | optional_unconditional
    | left_to_right
    | right_to_left
    | unconditional
}

unconditional = {
      unconditional_replacement
    | unconditional_inverse_replacement
    | unconditional_and_inverse_replacement
}

optional_unconditional = {
      optional_unconditional_replacement
    | optional_unconditional_inverse_replacement
    | optional_unconditional_and_inverse_replacement
}

left_to_right = {
      left_to_right_longest_match_replacement
    | left_to_right_longest_match_inverse_replacement
    | left_to_right_shortest_match_replacement
    | left_to_right_shortest_match_inverse_replacement
}

optional_left_to_right = {
      optional_left_to_right_longest_match_replacement
    | optional_left_to_right_longest_match_inverse_replacement
    | optional_left_to_right_shortest_match_replacement
    | optional_left_to_right_shortest_match_inverse_replacement
}

right_to_left = {
      right_to_left_longest_match_replacement
    | right_to_left_longest_match_inverse_replacement
    | right_to_left_shortest_match_replacement
    | right_to_left_shortest_match_inverse_replacement
}

optional_right_to_left = {
      optional_right_to_left_longest_match_replacement
    | optional_right_to_left_longest_match_inverse_replacement
    | optional_right_to_left_shortest_match_replacement
    | optional_left_to_right_shortest_match_inverse_replacement
}

unconditional_replacement             = { "->" }
unconditional_inverse_replacement     = { "<-" }
unconditional_and_inverse_replacement = { "<->" }

optional_unconditional_replacement             = { "(->)" }
optional_unconditional_inverse_replacement     = { "(<-)" }
optional_unconditional_and_inverse_replacement = { "(<->)" }

left_to_right_longest_match_replacement          = { "@->" }
left_to_right_longest_match_inverse_replacement  = { "<-@" }
left_to_right_shortest_match_replacement         = { "@>" }
left_to_right_shortest_match_inverse_replacement = { "<@" }

optional_left_to_right_longest_match_replacement          = { "(@->)" }
optional_left_to_right_longest_match_inverse_replacement  = { "(<-@)" }
optional_left_to_right_shortest_match_replacement         = { "(@>)" }
optional_left_to_right_shortest_match_inverse_replacement = { "(<@)" }

right_to_left_longest_match_replacement          = { "->@" }
right_to_left_longest_match_inverse_replacement  = { "@<-" }
right_to_left_shortest_match_replacement         = { ">@" }
right_to_left_shortest_match_inverse_replacement = { "@<" }

optional_right_to_left_longest_match_replacement          = { "(->@)" }
optional_right_to_left_longest_match_inverse_replacement  = { "(@<-)" }
optional_right_to_left_shortest_match_replacement         = { "(>@)" }
optional_right_to_left_shortest_match_inverse_replacement = { "(@<)" }

// ### Directions ###

direction = {
    two_level_replace
    | upward_replace
    | rightward_replace
    | leftward_replace
    | downward_replace
}

two_level_replace = { "|||" }
upward_replace    = { "||" }
rightward_replace = { "//" }
leftward_replace  = { "\\\\" }
downward_replace  = { "\\/" }

// ### Others ###

bicond = { "\u{2194}" }
comma = { "," }
complement = { "~" | "\u{00ac}" }
compose = { ".o." | "\u{2218}" }
contains = { "$" }
contains_one = { "$." }
contains_optional_one = { "$?" }
context = { "_" }
context_restrict = { "=>" }
cross_product_high_precedence = { ":" }
cross_product_low_precedence = { ".x." | "\u{00d7}" }
double_comma = { ",," }
flag_eliminate = { ".f" }
element_of = { "\u{2208}" }
end = { ";" }
end_d = { ";d" }
end_m = { ";m" }
follows = { ">" | "\u{227b}" }
ignore_all = { "/" }
ignore_internal = { "./." }
implies = { "\u{2192}" }
interleave_quotient = { "/\\/" }
intersect = { "&" | "\u{2229}" | "\u{2227}" }
inverse = { ".i" | "\u{207b}\u{00b9}" }
kleene_plus = { "+" }
kleene_star = { "*" }
ldot = { "[." ~ !"#" }
left_bracket = { "[" }
left_parenthesis = { "(" }
left_quotient = { "\\\\\\" }
lenient_compose = { ".O." }
lessnconcat = { "^<" ~ ('0'..'9')+ }
minus = { "-" }
mnconcat = { "^{" ~ ('0'..'9')+ ~ comma ~ ('0'..'9')+ ~ "}" }
morenconcat = { "^>" ~ ('0'..'9')+ }
nconcat = { "^" ~ ('0'..'9')+ }
not_equal = { "\u{2260}" }
precedes = { "<" | "\u{227a}" }
priority_union_l = { ".P." }
priority_union_u = { ".p." }
rdot = { ".]" }
reverse = { ".r" }
right_bracket = { "]" }
right_parenthesis = { ")" }
right_quotient = { "///" }
shuffle = { "<>" | "\u{2225}" }
substitute = { "`" }
term_negation = { "\\" }
triple_dot = { "..." }
union = { "|" | "\u{222a}" | "\u{2228}" }
xlower = { "." ~ ("l" | "2") | "\u{2082}" }
xupper = { "." ~ ("u" | "1") | "\u{2081}" }

WHITESPACE = _{ " " }
